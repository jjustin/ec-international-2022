Sensor read and write (basics)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


This tutorial contains the most important information on handling sensors in the ``ifxdaq``-library.
It gives an overview of:

- Initializing sensors
- Capturing live sensor data
- Recording sensor data
- Recording data from multiple sensors

Before we can start, make sure that at least on radar is connected to your system!


Initialize sensor and read data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The first thing we need to do is to create a configuration file. In this tutorial we will stick to the default
configuration files. If you want to use a different configuration file, just create it somewhere and specify
the file path when initializing the sensor. Note that all sensors use different configuration formats.
Make sure that you use right format (see default configurations) and that all settings are valid.

.. code:: python

    from ifxdaq.sensor.radar_ifx import RadarIfxAvian

    config_file = RadarIfxAvian.create_default_config_file()

    with RadarIfxAvian(config_file) as radar_device:
        for i, frame in enumerate(radar_device):
            print(frame)  # Do something with the live data
            if i >= 10:
                break

We get the actual data by iterating over the initialized device. Here we get ``radar`` data in each iteration and the
device ``temperature`` from time to time.


Record data
~~~~~~~~~~~

For recording we strongly recommend the use of our graphical user interface (:ref:`Recording tutorial
<tutorials/workflow_basic:Recording>`). The GUI takes care of detecting, selecting and configuring available sensors.
Furthermore, it allows to record data from multiple sources in an easy way.


Record data - Single sensor
""""""""""""""""""""""""""""""

If you still want to record the data on your own, you can use the following code as a boilerplate.
Basically, you just need to create a DataRecorder instance and pass the data frame-wise.
If you are using sensors, which are already implemented in the ``ifxdaq``-library, you get all relevant information
(``frame_format``, ``meta_data`` and ``config_file``) from the sensor itself:

.. code:: python

    from pathlib import Path
    from ifxdaq.record import DataRecorder

    rec_dir = Path("recordings")
    if not rec_dir.exists():
        rec_dir.mkdir()

    with RadarIfxAvian(config_file) as radar_device:
        with DataRecorder(
            rec_dir / "my_recording",
            frame_format=radar_device.frame_format,
            meta_data=radar_device.meta_data,
            config_file=radar_device.config_file,
        ) as recorder:
            for i, frame in enumerate(radar_device):
                recorder.write(frame)
                if i >= 10:
                    break


Record data - Multiple sensors
""""""""""""""""""""""""""""""

Recording data from multiple sensors is a bit more tricky, because it requires threads.
Again, we encourage you to use the graphical user interface for this purpose.
If you prefer implementing your own recorder, the following lines demonstrate how to collect data from all attached
radars and web-cams:

.. code:: python

    import time
    from ifxdaq.manager import SensorManager

    # We only look for radars and webcams in this example.
    manager = SensorManager(["ifxdaq.sensor.radar_ifx.RadarIfxAvian", "ifxdaq.sensor.camera_ocv.CamOpenCV"])
    manager.discover()

    # Here we simply start all available sensors.
    # Use manager.configure(sensor, config_file) to specify individual configuration files for each sensor.
    for sensor in manager.sensors:
        manager.start(sensor)

    # Record data for a few seconds.
    manager.start_recording("recordings")
    time.sleep(10)
    manager.stop_recording()

    # Propely close all sensors and threads.
    manager.close_all()
