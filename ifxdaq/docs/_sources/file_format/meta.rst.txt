.. _metadata:

Meta data (``meta.json``)
=============================

**Format**

We store device dependent meta data next to the data files as ``meta.json``. Generic meta data that applies to all
sensors is stored in the recording directory on the same level as the sensor data folders.

- file type: ``.json`` (`json@Wikipedia <https://en.wikipedia.org/wiki/JSON>`_)


**Available libraries**

- Python: built-in json support
- Matlab: built-in json support

.. _generic_meta:

Generic
^^^^^^^

  =============================== ========= ============================================================================
  Key                             Type      Description
  =============================== ========= ============================================================================
  ``ifxdaq_version``              str       Version of the library.
  ``username``                    str       User, who recorded the data.
  ``hostname``                    str       Machine, which was used to record the data.
  ``os``                          str       Operating system of the host.
  ``os_release``                  str       Release of the operating system.
  ``os_version``                  str       Version of the operating system.
  ``machine``                     str       Processor type of the host machine.
  ``python_version``              str       Python version.
  ``python_implementation``       str       Python implementation.
  ``date_captured``               str       Date, when the recording was started (ISO format).
  =============================== ========= ============================================================================

Radars
^^^^^^

- Infineon Avian (BGT60TRxx) radar: :class:`~ifxdaq.sensor.radar_ifx.RadarIfxAvian`

  =============================== ========= ============================================================================
  Key                             Type      Description
  =============================== ========= ============================================================================
  ``uuid``                        str       Unique ID of the device.
  ``sdk_version``                 str       Underlying RDK version.
  ``adc_resolution``              int       Resolution of the recorded radar data.
  ``firmware_version``            str       Version of the firmware.
  ``description``                 str       Sensor description.
  ``shield_type``                 str       Shield descriptor.
  =============================== ========= ============================================================================


Cameras
^^^^^^^

- Intel RealSenseâ„¢ cameras: :class:`~ifxdaq.sensor.camera_irs.CamIntelRealSense`

  =============================== ========= ============================================================================
  Key                             Type      Description
  =============================== ========= ============================================================================
  ``device_type``                 str       Camera model.
  ``serial``                      str       Serial number of the camera.
  ``pyrealsense_version``         str       Version of the Python wrapper.
  ``firmware``                    str       Firmware version of the camera.
  ``usb_type``                    str       Version of the USB standard used for the connection.
  =============================== ========= ============================================================================

- Stemmer CVB based cameras (used in the DAQ): :class:`~ifxdaq.sensor.camera_cvb.CamCommonVisionBlox`

  =============================== ========= ============================================================================
  Key                             Type      Description
  =============================== ========= ============================================================================
  ``device_id``                   str       Serial number of the camera.
  ``vendor_name``                 str       Name of the camera vendor.
  ``family_name``                 str       Name of the camera family.
  ``model_name``                  str       Name of the camera model.
  ``device_version``              str       Revision of the device.
  ``cvbpy_version``               str       Version of the Python wrapper.
  ``cvb_version``                 str       Underlying CVB CameraSuite version.
  ``firmware_version``            str       Firmware version of the camera.
  ``link_speed``                  str       Link speed of the ethernet connection.
  =============================== ========= ============================================================================

- OpenCV based webcams: :class:`~ifxdaq.sensor.camera_ocv.CamOpenCV`

  =============================== ========= ============================================================================
  Key                             Type      Description
  =============================== ========= ============================================================================
  ``device_id``                   str       Unique ID of the device.
  ``backend``                     str       Backend used by OpenCV to access the camera.
  =============================== ========= ============================================================================


Stages
^^^^^^

  ============================================= =============== ========================================================
  Key                                           Type            Description
  ============================================= =============== ========================================================
  ``input``                                     List[str]       List of files used to generate the labels.
  ``name``                                      str             Fully qualifying class name of the algorithm.
  ``settings``                                  Dict            Settings used in the stage.
  ``date_created``                              str             Date, when the labels were created (ISO format).
  ``system_information``                        Dict            Dict with :ref:`generic_meta` meta keys.
  ============================================= =============== ========================================================
